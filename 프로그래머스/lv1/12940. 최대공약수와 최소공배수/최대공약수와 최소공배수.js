function solution(n, m) {
    // 유클리드 호제법
    // 최대공약수를 구하기 위한 알고리즘 (공식)
    
    // a를 b로 나눴을 떄 (a가 b보다 클 경우) === 큰 수에서 작은 수를 나눴을 때
    // 나머지 값이 0이 되면, 작은 수(b)가 최대공약수가 된다.
    // 나머지 값이 0이 되지 않으면, 작은 수(b)가 큰 수(a)가 되고
    // 나머지 값이 작은 수(b)가 된다.
    // 반복했을 때에 나머지 값이 0이 나오면, 작은 수(b)가 최대공약수가 된다.
    
    let a = m; // 큰 수
    let b = n; // 작은 수
    let r = 0; // 큰 수를 작은 수로 나눴을 때의 나머지 값
    
    while(a % b > 0){
        r = a % b; // 큰 수에서 작은 수를 나눈 나머지 값을 저장
        a = b; // 큰 수를 나눴을 때의 작은 수를 가져온다.
        b = r; // 작은 수에는 나머지 값을 가져온다.
    }
    
    // 최소공배수는 두 수를 곱한 수에 최대공약수를 나눠준 몫의 값
    return [b, (n*m)/b]
}